//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoctorMedicalWeb.App_Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DoctorMedicalWebEntities : DbContext
    {
        public DoctorMedicalWebEntities()
            : base("name=DoctorMedicalWebEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AnalisisClinico> AnalisisClinicoes { get; set; }
        public virtual DbSet<ArchivosPaciente> ArchivosPacientes { get; set; }
        public virtual DbSet<Auditoria> Auditorias { get; set; }
        public virtual DbSet<CategoriaPersonal> CategoriaPersonals { get; set; }
        public virtual DbSet<Cirugia> Cirugias { get; set; }
        public virtual DbSet<Cita> Citas { get; set; }
        public virtual DbSet<Clinica> Clinicas { get; set; }
        public virtual DbSet<ConsultaMedica> ConsultaMedicas { get; set; }
        public virtual DbSet<ConsultaMedicaCirugia> ConsultaMedicaCirugias { get; set; }
        public virtual DbSet<ConsultaMedicaEmbarazo> ConsultaMedicaEmbarazoes { get; set; }
        public virtual DbSet<ConsultaMedicaEnfermeda> ConsultaMedicaEnfermedas { get; set; }
        public virtual DbSet<ConsultaMedicaEnfermedaFamiliar> ConsultaMedicaEnfermedaFamiliars { get; set; }
        public virtual DbSet<ConsultaMedicaHistorial> ConsultaMedicaHistorials { get; set; }
        public virtual DbSet<ConsultaMedicaHistorialDiagnostico> ConsultaMedicaHistorialDiagnosticoes { get; set; }
        public virtual DbSet<ConsultaMedicaHistorialEnfermeda> ConsultaMedicaHistorialEnfermedas { get; set; }
        public virtual DbSet<ConsultaMedicaHistorialEvaluacionFisica> ConsultaMedicaHistorialEvaluacionFisicas { get; set; }
        public virtual DbSet<ConsultaMedicaHistorialMotivoConsulta> ConsultaMedicaHistorialMotivoConsultas { get; set; }
        public virtual DbSet<ConsultaMedicaHistorialTratamiento> ConsultaMedicaHistorialTratamientoes { get; set; }
        public virtual DbSet<Consultorio> Consultorios { get; set; }
        public virtual DbSet<Diagnostico> Diagnosticoes { get; set; }
        public virtual DbSet<DiasSemana> DiasSemanas { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<DoctorTimeZone> DoctorTimeZones { get; set; }
        public virtual DbSet<Enfermedad> Enfermedads { get; set; }
        public virtual DbSet<Especialidade> Especialidades { get; set; }
        public virtual DbSet<EspecialidadFormularioCampos> EspecialidadFormularioCampos { get; set; }
        public virtual DbSet<EvaluacionFisica> EvaluacionFisicas { get; set; }
        public virtual DbSet<Factura> Facturas { get; set; }
        public virtual DbSet<FacturaDetalle> FacturaDetalles { get; set; }
        public virtual DbSet<FacturaEstado> FacturaEstadoes { get; set; }
        public virtual DbSet<FormularioCampos> FormularioCampos { get; set; }
        public virtual DbSet<Formulario> Formularios { get; set; }
        public virtual DbSet<FormulariosAccion> FormulariosAccions { get; set; }
        public virtual DbSet<GrupoSanguineo> GrupoSanguineos { get; set; }
        public virtual DbSet<HorarioTrabajo> HorarioTrabajoes { get; set; }
        public virtual DbSet<HorarioTrabajoDestalle> HorarioTrabajoDestalles { get; set; }
        public virtual DbSet<ImagenDoctor> ImagenDoctors { get; set; }
        public virtual DbSet<Imagene> Imagenes { get; set; }
        public virtual DbSet<InstitucionAseguradoraPlane> InstitucionAseguradoraPlanes { get; set; }
        public virtual DbSet<InstitucionesAseguradora> InstitucionesAseguradoras { get; set; }
        public virtual DbSet<LoginProvider> LoginProviders { get; set; }
        public virtual DbSet<Medicamento> Medicamentoes { get; set; }
        public virtual DbSet<Moneda> Monedas { get; set; }
        public virtual DbSet<MotivoConsulta> MotivoConsultas { get; set; }
        public virtual DbSet<Paciente> Pacientes { get; set; }
        public virtual DbSet<PacienteFoto> PacienteFotoes { get; set; }
        public virtual DbSet<Pai> Pais { get; set; }
        public virtual DbSet<Personal> Personals { get; set; }
        public virtual DbSet<Plane> Planes { get; set; }
        public virtual DbSet<PlanFactura> PlanFacturas { get; set; }
        public virtual DbSet<PlanFacturaDetalle> PlanFacturaDetalles { get; set; }
        public virtual DbSet<PlanFormulario> PlanFormularios { get; set; }
        public virtual DbSet<Procedimiento> Procedimientos { get; set; }
        public virtual DbSet<RecetaAnalisisClinico> RecetaAnalisisClinicoes { get; set; }
        public virtual DbSet<RecetaImagene> RecetaImagenes { get; set; }
        public virtual DbSet<RecetaMedicamento> RecetaMedicamentos { get; set; }
        public virtual DbSet<RecetaPacienteVacuna> RecetaPacienteVacunas { get; set; }
        public virtual DbSet<Receta> Recetas { get; set; }
        public virtual DbSet<Representante> Representantes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolFormulario> RolFormularios { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TipoArchivoPaciente> TipoArchivoPacientes { get; set; }
        public virtual DbSet<TipoDocumento> TipoDocumentoes { get; set; }
        public virtual DbSet<TipoFormulario> TipoFormularios { get; set; }
        public virtual DbSet<TipoIndicacion> TipoIndicacions { get; set; }
        public virtual DbSet<TipoPago> TipoPagoes { get; set; }
        public virtual DbSet<Tratamiento> Tratamientoes { get; set; }
        public virtual DbSet<UsoMedicamento> UsoMedicamentos { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
        public virtual DbSet<UsuarioConsultorio> UsuarioConsultorios { get; set; }
        public virtual DbSet<Vacuna> Vacunas { get; set; }
        public virtual DbSet<Accione> Acciones { get; set; }
        public virtual DbSet<EstadoAgenda> EstadoAgendas { get; set; }
        public virtual DbSet<Parametro> Parametros { get; set; }
        public virtual DbSet<PediatraParto> PediatraPartoes { get; set; }
        public virtual DbSet<PEDIATRIAeMBARAZO> PEDIATRIAeMBARAZOes { get; set; }
        public virtual DbSet<PlanFormularios_copia> PlanFormularios_copia { get; set; }
        public virtual DbSet<TipoCompromiso> TipoCompromisoes { get; set; }
        public virtual DbSet<vw_ConsultorioDoctor> vw_ConsultorioDoctor { get; set; }
        public virtual DbSet<vw_ListDeFormuriosbyRolyUser> vw_ListDeFormuriosbyRolyUser { get; set; }
        public virtual DbSet<vw_planFormulario> vw_planFormulario { get; set; }
        public virtual DbSet<vw_receta> vw_receta { get; set; }
        public virtual DbSet<vw_UsuarioConsultorios> vw_UsuarioConsultorios { get; set; }
        public virtual DbSet<vw_UsuarioDoctor> vw_UsuarioDoctor { get; set; }
        public virtual DbSet<vw_UsuariosPersonalDelDoctor> vw_UsuariosPersonalDelDoctor { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_Auditoria_Result> sp_Auditoria(Nullable<int> paisSecuencia, Nullable<int> clinSecuencia, Nullable<int> consSecuencia, Nullable<int> doctSecuencia, Nullable<int> persSecuencia, Nullable<int> tPersSecuencia, Nullable<System.DateTime> audiFechaMaquina, Nullable<System.DateTime> audiFechaServidor, string audiValorOriginal, string audiValorNuevo, Nullable<int> usuaCodigo, Nullable<int> audiIpMaquina, Nullable<int> pagiSecuencia, Nullable<int> tablSecuencia, Nullable<int> accisecuencia)
        {
            var paisSecuenciaParameter = paisSecuencia.HasValue ?
                new ObjectParameter("PaisSecuencia", paisSecuencia) :
                new ObjectParameter("PaisSecuencia", typeof(int));
    
            var clinSecuenciaParameter = clinSecuencia.HasValue ?
                new ObjectParameter("clinSecuencia", clinSecuencia) :
                new ObjectParameter("clinSecuencia", typeof(int));
    
            var consSecuenciaParameter = consSecuencia.HasValue ?
                new ObjectParameter("ConsSecuencia", consSecuencia) :
                new ObjectParameter("ConsSecuencia", typeof(int));
    
            var doctSecuenciaParameter = doctSecuencia.HasValue ?
                new ObjectParameter("DoctSecuencia", doctSecuencia) :
                new ObjectParameter("DoctSecuencia", typeof(int));
    
            var persSecuenciaParameter = persSecuencia.HasValue ?
                new ObjectParameter("PersSecuencia", persSecuencia) :
                new ObjectParameter("PersSecuencia", typeof(int));
    
            var tPersSecuenciaParameter = tPersSecuencia.HasValue ?
                new ObjectParameter("TPersSecuencia", tPersSecuencia) :
                new ObjectParameter("TPersSecuencia", typeof(int));
    
            var audiFechaMaquinaParameter = audiFechaMaquina.HasValue ?
                new ObjectParameter("AudiFechaMaquina", audiFechaMaquina) :
                new ObjectParameter("AudiFechaMaquina", typeof(System.DateTime));
    
            var audiFechaServidorParameter = audiFechaServidor.HasValue ?
                new ObjectParameter("AudiFechaServidor", audiFechaServidor) :
                new ObjectParameter("AudiFechaServidor", typeof(System.DateTime));
    
            var audiValorOriginalParameter = audiValorOriginal != null ?
                new ObjectParameter("AudiValorOriginal", audiValorOriginal) :
                new ObjectParameter("AudiValorOriginal", typeof(string));
    
            var audiValorNuevoParameter = audiValorNuevo != null ?
                new ObjectParameter("AudiValorNuevo", audiValorNuevo) :
                new ObjectParameter("AudiValorNuevo", typeof(string));
    
            var usuaCodigoParameter = usuaCodigo.HasValue ?
                new ObjectParameter("UsuaCodigo", usuaCodigo) :
                new ObjectParameter("UsuaCodigo", typeof(int));
    
            var audiIpMaquinaParameter = audiIpMaquina.HasValue ?
                new ObjectParameter("AudiIpMaquina", audiIpMaquina) :
                new ObjectParameter("AudiIpMaquina", typeof(int));
    
            var pagiSecuenciaParameter = pagiSecuencia.HasValue ?
                new ObjectParameter("PagiSecuencia", pagiSecuencia) :
                new ObjectParameter("PagiSecuencia", typeof(int));
    
            var tablSecuenciaParameter = tablSecuencia.HasValue ?
                new ObjectParameter("TablSecuencia", tablSecuencia) :
                new ObjectParameter("TablSecuencia", typeof(int));
    
            var accisecuenciaParameter = accisecuencia.HasValue ?
                new ObjectParameter("Accisecuencia", accisecuencia) :
                new ObjectParameter("Accisecuencia", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Auditoria_Result>("sp_Auditoria", paisSecuenciaParameter, clinSecuenciaParameter, consSecuenciaParameter, doctSecuenciaParameter, persSecuenciaParameter, tPersSecuenciaParameter, audiFechaMaquinaParameter, audiFechaServidorParameter, audiValorOriginalParameter, audiValorNuevoParameter, usuaCodigoParameter, audiIpMaquinaParameter, pagiSecuenciaParameter, tablSecuenciaParameter, accisecuenciaParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
